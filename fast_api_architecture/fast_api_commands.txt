# Common FastAPI and Python Commands Reference

# FastAPI and Uvicorn Commands
1. uvicorn app.main:app --host 0.0.0.0 --port 8000
   - Runs the FastAPI application using Uvicorn.
   - 'app.main:app' specifies the FastAPI app instance to run.
   - '--host' sets the server's IP address to bind to (0.0.0.0 allows access from any IP).
   - '--port' specifies the port to listen on (default is 8000).

2. uvicorn app.main:app --reload
   - Starts the FastAPI application with auto-reload enabled.
   - Automatically reloads the server on code changes, useful for development.

3. pip install fastapi
   - Installs the FastAPI framework.

4. pip install uvicorn
   - Installs Uvicorn, the ASGI server for serving FastAPI applications.

5. pip install python-dotenv
   - Loads environment variables from a `.env` file into the application.

6. pip install pydantic
   - Installs Pydantic for data validation and settings management in FastAPI.

# Git Commands
7. git init
   - Initializes a new Git repository in the current directory.

8. git add .
   - Stages all changes in the Git repository for the next commit.

9. git commit -m "Your commit message"
   - Commits the staged changes to the repository with a message.

10. git status
    - Shows the current status of the Git repository, including staged, unstaged, and untracked files.

11. git push origin main
    - Pushes your commits to the 'main' branch of the remote repository named 'origin'.

12. git pull origin main
    - Fetches changes from the remote repository and merges them into your local branch.

# Python Environment Commands
13. python -m venv venv
    - Creates a new virtual environment named 'venv' in the current directory.

14. source venv/bin/activate   # On Windows use: venv\Scripts\activate
    - Activates the virtual environment.

15. pip freeze > requirements.txt
    - Outputs installed packages and their versions into a `requirements.txt` file.

16. pip install -r requirements.txt
    - Installs all packages listed in `requirements.txt`.

# Testing and Linting Commands
17. pip install pytest
    - Installs pytest, a testing framework for Python.

18. pytest
    - Runs all tests in the current directory.

19. pip install flake8
    - Installs Flake8, a linting tool for checking style guide enforcement in Python code.

20. flake8
    - Checks the code in the current directory for style violations.

21. pip install black
    - Installs Black, a code formatter for Python.

22. black .
    - Formats all Python files in the current directory and subdirectories.

# General HTTP Commands
23. curl -X GET "http://127.0.0.1:8000/endpoint"
    - Sends a GET request to the specified endpoint of the FastAPI application.

24. curl -X POST "http://127.0.0.1:8000/endpoint" -H "Content-Type: application/json" -d '{"key": "value"}'
    - Sends a POST request with a JSON payload to the specified endpoint.

25. curl -X PUT "http://127.0.0.1:8000/endpoint/{id}" -H "Content-Type: application/json" -d '{"key": "new_value"}'
    - Sends a PUT request to update an existing resource identified by ID.

26. curl -X DELETE "http://127.0.0.1:8000/endpoint/{id}"
    - Sends a DELETE request to remove the resource identified by ID.

# Miscellaneous Commands
27. python run.py
    - Runs a Python script named `run.py`.

28. python -m http.server
    - Starts a simple HTTP server serving the current directory on port 8000.
